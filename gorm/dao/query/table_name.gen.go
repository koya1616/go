// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"koya/dao/model"
)

func newTableName(db *gorm.DB, opts ...gen.DOOption) tableName {
	_tableName := tableName{}

	_tableName.tableNameDo.UseDB(db, opts...)
	_tableName.tableNameDo.UseModel(&model.TableName{})

	tableName := _tableName.tableNameDo.TableName()
	_tableName.ALL = field.NewAsterisk(tableName)
	_tableName.ID = field.NewInt32(tableName, "id")
	_tableName.CreateTime = field.NewTime(tableName, "create_time")
	_tableName.Name = field.NewString(tableName, "name")

	_tableName.fillFieldMap()

	return _tableName
}

type tableName struct {
	tableNameDo tableNameDo

	ALL        field.Asterisk
	ID         field.Int32
	CreateTime field.Time
	Name       field.String

	fieldMap map[string]field.Expr
}

func (t tableName) Table(newTableName string) *tableName {
	t.tableNameDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tableName) As(alias string) *tableName {
	t.tableNameDo.DO = *(t.tableNameDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tableName) updateTableName(table string) *tableName {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.CreateTime = field.NewTime(table, "create_time")
	t.Name = field.NewString(table, "name")

	t.fillFieldMap()

	return t
}

func (t *tableName) WithContext(ctx context.Context) *tableNameDo {
	return t.tableNameDo.WithContext(ctx)
}

func (t tableName) TableName() string { return t.tableNameDo.TableName() }

func (t tableName) Alias() string { return t.tableNameDo.Alias() }

func (t tableName) Columns(cols ...field.Expr) gen.Columns { return t.tableNameDo.Columns(cols...) }

func (t *tableName) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tableName) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["name"] = t.Name
}

func (t tableName) clone(db *gorm.DB) tableName {
	t.tableNameDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tableName) replaceDB(db *gorm.DB) tableName {
	t.tableNameDo.ReplaceDB(db)
	return t
}

type tableNameDo struct{ gen.DO }

func (t tableNameDo) Debug() *tableNameDo {
	return t.withDO(t.DO.Debug())
}

func (t tableNameDo) WithContext(ctx context.Context) *tableNameDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tableNameDo) ReadDB() *tableNameDo {
	return t.Clauses(dbresolver.Read)
}

func (t tableNameDo) WriteDB() *tableNameDo {
	return t.Clauses(dbresolver.Write)
}

func (t tableNameDo) Session(config *gorm.Session) *tableNameDo {
	return t.withDO(t.DO.Session(config))
}

func (t tableNameDo) Clauses(conds ...clause.Expression) *tableNameDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tableNameDo) Returning(value interface{}, columns ...string) *tableNameDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tableNameDo) Not(conds ...gen.Condition) *tableNameDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tableNameDo) Or(conds ...gen.Condition) *tableNameDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tableNameDo) Select(conds ...field.Expr) *tableNameDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tableNameDo) Where(conds ...gen.Condition) *tableNameDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tableNameDo) Order(conds ...field.Expr) *tableNameDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tableNameDo) Distinct(cols ...field.Expr) *tableNameDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tableNameDo) Omit(cols ...field.Expr) *tableNameDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tableNameDo) Join(table schema.Tabler, on ...field.Expr) *tableNameDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tableNameDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tableNameDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tableNameDo) RightJoin(table schema.Tabler, on ...field.Expr) *tableNameDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tableNameDo) Group(cols ...field.Expr) *tableNameDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tableNameDo) Having(conds ...gen.Condition) *tableNameDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tableNameDo) Limit(limit int) *tableNameDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tableNameDo) Offset(offset int) *tableNameDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tableNameDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tableNameDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tableNameDo) Unscoped() *tableNameDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tableNameDo) Create(values ...*model.TableName) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tableNameDo) CreateInBatches(values []*model.TableName, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tableNameDo) Save(values ...*model.TableName) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tableNameDo) First() (*model.TableName, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TableName), nil
	}
}

func (t tableNameDo) Take() (*model.TableName, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TableName), nil
	}
}

func (t tableNameDo) Last() (*model.TableName, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TableName), nil
	}
}

func (t tableNameDo) Find() ([]*model.TableName, error) {
	result, err := t.DO.Find()
	return result.([]*model.TableName), err
}

func (t tableNameDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TableName, err error) {
	buf := make([]*model.TableName, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tableNameDo) FindInBatches(result *[]*model.TableName, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tableNameDo) Attrs(attrs ...field.AssignExpr) *tableNameDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tableNameDo) Assign(attrs ...field.AssignExpr) *tableNameDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tableNameDo) Joins(fields ...field.RelationField) *tableNameDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tableNameDo) Preload(fields ...field.RelationField) *tableNameDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tableNameDo) FirstOrInit() (*model.TableName, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TableName), nil
	}
}

func (t tableNameDo) FirstOrCreate() (*model.TableName, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TableName), nil
	}
}

func (t tableNameDo) FindByPage(offset int, limit int) (result []*model.TableName, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tableNameDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tableNameDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tableNameDo) Delete(models ...*model.TableName) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tableNameDo) withDO(do gen.Dao) *tableNameDo {
	t.DO = *do.(*gen.DO)
	return t
}
